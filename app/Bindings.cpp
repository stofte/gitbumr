/* generated by rust_qt_binding_generator */
#include "Bindings.h"

namespace {

    struct option_quintptr {
    public:
        quintptr value;
        bool some;
        operator QVariant() const {
            if (some) {
                return QVariant::fromValue(value);
            }
            return QVariant();
        }
    };
    static_assert(std::is_pod<option_quintptr>::value, "option_quintptr must be a POD type.");

    typedef void (*qstring_set)(QString* val, const char* utf8, int nbytes);
    void set_qstring(QString* val, const char* utf8, int nbytes) {
        *val = QString::fromUtf8(utf8, nbytes);
    }

    struct qmodelindex_t {
        int row;
        quintptr id;
    };
    inline QVariant cleanNullQVariant(const QVariant& v) {
        return (v.isNull()) ?QVariant() :v;
    }
    inline void repositoriesActiveRepositoryChanged(Repositories* o)
    {
        Q_EMIT o->activeRepositoryChanged();
    }
}
extern "C" {
    void history_data_author(const History::Private*, int, QString*, qstring_set);
    void history_data_message(const History::Private*, int, QString*, qstring_set);
    void history_data_oid(const History::Private*, int, QString*, qstring_set);
    void history_data_time(const History::Private*, int, QString*, qstring_set);
    void history_sort(History::Private*, unsigned char column, Qt::SortOrder order = Qt::AscendingOrder);

    int history_row_count(const History::Private*);
    bool history_insert_rows(History::Private*, int, int);
    bool history_remove_rows(History::Private*, int, int);
    bool history_can_fetch_more(const History::Private*);
    void history_fetch_more(History::Private*);
}
int History::columnCount(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : 1;
}

bool History::hasChildren(const QModelIndex &parent) const
{
    return rowCount(parent) > 0;
}

int History::rowCount(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : history_row_count(m_d);
}

bool History::insertRows(int row, int count, const QModelIndex &)
{
    return history_insert_rows(m_d, row, count);
}

bool History::removeRows(int row, int count, const QModelIndex &)
{
    return history_remove_rows(m_d, row, count);
}

QModelIndex History::index(int row, int column, const QModelIndex &parent) const
{
    if (!parent.isValid() && row >= 0 && row < rowCount(parent) && column >= 0 && column < 1) {
        return createIndex(row, column, (quintptr)row);
    }
    return QModelIndex();
}

QModelIndex History::parent(const QModelIndex &) const
{
    return QModelIndex();
}

bool History::canFetchMore(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : history_can_fetch_more(m_d);
}

void History::fetchMore(const QModelIndex &parent)
{
    if (!parent.isValid()) {
        history_fetch_more(m_d);
    }
}
void History::updatePersistentIndexes() {}

void History::sort(int column, Qt::SortOrder order)
{
    history_sort(m_d, column, order);
}
Qt::ItemFlags History::flags(const QModelIndex &i) const
{
    auto flags = QAbstractItemModel::flags(i);
    return flags;
}

QString History::author(int row) const
{
    QString s;
    history_data_author(m_d, row, &s, set_qstring);
    return s;
}

QString History::message(int row) const
{
    QString s;
    history_data_message(m_d, row, &s, set_qstring);
    return s;
}

QString History::oid(int row) const
{
    QString s;
    history_data_oid(m_d, row, &s, set_qstring);
    return s;
}

QString History::time(int row) const
{
    QString s;
    history_data_time(m_d, row, &s, set_qstring);
    return s;
}

QVariant History::data(const QModelIndex &index, int role) const
{
    Q_ASSERT(rowCount(index.parent()) > index.row());
    switch (index.column()) {
    case 0:
        switch (role) {
        case Qt::UserRole + 0:
            return QVariant::fromValue(author(index.row()));
        case Qt::UserRole + 1:
            return QVariant::fromValue(message(index.row()));
        case Qt::UserRole + 2:
            return QVariant::fromValue(oid(index.row()));
        case Qt::UserRole + 3:
            return QVariant::fromValue(time(index.row()));
        }
        break;
    }
    return QVariant();
}

int History::role(const char* name) const {
    auto names = roleNames();
    auto i = names.constBegin();
    while (i != names.constEnd()) {
        if (i.value() == name) {
            return i.key();
        }
        ++i;
    }
    return -1;
}
QHash<int, QByteArray> History::roleNames() const {
    QHash<int, QByteArray> names = QAbstractItemModel::roleNames();
    names.insert(Qt::UserRole + 0, "author");
    names.insert(Qt::UserRole + 1, "message");
    names.insert(Qt::UserRole + 2, "oid");
    names.insert(Qt::UserRole + 3, "time");
    return names;
}
QVariant History::headerData(int section, Qt::Orientation orientation, int role) const
{
    if (orientation != Qt::Horizontal) {
        return QVariant();
    }
    return m_headerData.value(qMakePair(section, (Qt::ItemDataRole)role), role == Qt::DisplayRole ?QString::number(section + 1) :QVariant());
}

bool History::setHeaderData(int section, Qt::Orientation orientation, const QVariant &value, int role)
{
    if (orientation != Qt::Horizontal) {
        return false;
    }
    m_headerData.insert(qMakePair(section, (Qt::ItemDataRole)role), value);
    return true;
}

extern "C" {
    History::Private* history_new(History*,
        void (*)(const History*),
        void (*)(History*),
        void (*)(History*),
        void (*)(History*, quintptr, quintptr),
        void (*)(History*),
        void (*)(History*),
        void (*)(History*, int, int),
        void (*)(History*),
        void (*)(History*, int, int, int),
        void (*)(History*),
        void (*)(History*, int, int),
        void (*)(History*));
    void history_free(History::Private*);
    void history_load(History::Private*, const ushort*, int);
};

extern "C" {
    bool repositories_data_current(const Repositories::Private*, int);
    void repositories_data_display_name(const Repositories::Private*, int, QString*, qstring_set);
    quint64 repositories_data_id(const Repositories::Private*, int);
    void repositories_sort(Repositories::Private*, unsigned char column, Qt::SortOrder order = Qt::AscendingOrder);

    int repositories_row_count(const Repositories::Private*);
    bool repositories_insert_rows(Repositories::Private*, int, int);
    bool repositories_remove_rows(Repositories::Private*, int, int);
    bool repositories_can_fetch_more(const Repositories::Private*);
    void repositories_fetch_more(Repositories::Private*);
}
int Repositories::columnCount(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : 1;
}

bool Repositories::hasChildren(const QModelIndex &parent) const
{
    return rowCount(parent) > 0;
}

int Repositories::rowCount(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : repositories_row_count(m_d);
}

bool Repositories::insertRows(int row, int count, const QModelIndex &)
{
    return repositories_insert_rows(m_d, row, count);
}

bool Repositories::removeRows(int row, int count, const QModelIndex &)
{
    return repositories_remove_rows(m_d, row, count);
}

QModelIndex Repositories::index(int row, int column, const QModelIndex &parent) const
{
    if (!parent.isValid() && row >= 0 && row < rowCount(parent) && column >= 0 && column < 1) {
        return createIndex(row, column, (quintptr)row);
    }
    return QModelIndex();
}

QModelIndex Repositories::parent(const QModelIndex &) const
{
    return QModelIndex();
}

bool Repositories::canFetchMore(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : repositories_can_fetch_more(m_d);
}

void Repositories::fetchMore(const QModelIndex &parent)
{
    if (!parent.isValid()) {
        repositories_fetch_more(m_d);
    }
}
void Repositories::updatePersistentIndexes() {}

void Repositories::sort(int column, Qt::SortOrder order)
{
    repositories_sort(m_d, column, order);
}
Qt::ItemFlags Repositories::flags(const QModelIndex &i) const
{
    auto flags = QAbstractItemModel::flags(i);
    return flags;
}

bool Repositories::current(int row) const
{
    return repositories_data_current(m_d, row);
}

QString Repositories::displayName(int row) const
{
    QString s;
    repositories_data_display_name(m_d, row, &s, set_qstring);
    return s;
}

quint64 Repositories::id(int row) const
{
    return repositories_data_id(m_d, row);
}

QVariant Repositories::data(const QModelIndex &index, int role) const
{
    Q_ASSERT(rowCount(index.parent()) > index.row());
    switch (index.column()) {
    case 0:
        switch (role) {
        case Qt::UserRole + 0:
            return QVariant::fromValue(current(index.row()));
        case Qt::UserRole + 1:
            return QVariant::fromValue(displayName(index.row()));
        case Qt::UserRole + 2:
            return QVariant::fromValue(id(index.row()));
        }
        break;
    }
    return QVariant();
}

int Repositories::role(const char* name) const {
    auto names = roleNames();
    auto i = names.constBegin();
    while (i != names.constEnd()) {
        if (i.value() == name) {
            return i.key();
        }
        ++i;
    }
    return -1;
}
QHash<int, QByteArray> Repositories::roleNames() const {
    QHash<int, QByteArray> names = QAbstractItemModel::roleNames();
    names.insert(Qt::UserRole + 0, "current");
    names.insert(Qt::UserRole + 1, "displayName");
    names.insert(Qt::UserRole + 2, "id");
    return names;
}
QVariant Repositories::headerData(int section, Qt::Orientation orientation, int role) const
{
    if (orientation != Qt::Horizontal) {
        return QVariant();
    }
    return m_headerData.value(qMakePair(section, (Qt::ItemDataRole)role), role == Qt::DisplayRole ?QString::number(section + 1) :QVariant());
}

bool Repositories::setHeaderData(int section, Qt::Orientation orientation, const QVariant &value, int role)
{
    if (orientation != Qt::Horizontal) {
        return false;
    }
    m_headerData.insert(qMakePair(section, (Qt::ItemDataRole)role), value);
    return true;
}

extern "C" {
    Repositories::Private* repositories_new(Repositories*, void (*)(Repositories*),
        void (*)(const Repositories*),
        void (*)(Repositories*),
        void (*)(Repositories*),
        void (*)(Repositories*, quintptr, quintptr),
        void (*)(Repositories*),
        void (*)(Repositories*),
        void (*)(Repositories*, int, int),
        void (*)(Repositories*),
        void (*)(Repositories*, int, int, int),
        void (*)(Repositories*),
        void (*)(Repositories*, int, int),
        void (*)(Repositories*));
    void repositories_free(Repositories::Private*);
    void repositories_active_repository_get(const Repositories::Private*, QString*, qstring_set);
    bool repositories_add(Repositories::Private*, quint64, const ushort*, int);
    void repositories_add_last_error(const Repositories::Private*, QString*, qstring_set);
    bool repositories_remove(Repositories::Private*, quint64);
    void repositories_set_current(Repositories::Private*, quint64);
};

History::History(bool /*owned*/, QObject *parent):
    QAbstractItemModel(parent),
    m_d(nullptr),
    m_ownsPrivate(false)
{
    initHeaderData();
}

History::History(QObject *parent):
    QAbstractItemModel(parent),
    m_d(history_new(this,
        [](const History* o) {
            Q_EMIT o->newDataReady(QModelIndex());
        },
        [](History* o) {
            Q_EMIT o->layoutAboutToBeChanged();
        },
        [](History* o) {
            o->updatePersistentIndexes();
            Q_EMIT o->layoutChanged();
        },
        [](History* o, quintptr first, quintptr last) {
            o->dataChanged(o->createIndex(first, 0, first),
                       o->createIndex(last, 0, last));
        },
        [](History* o) {
            o->beginResetModel();
        },
        [](History* o) {
            o->endResetModel();
        },
        [](History* o, int first, int last) {
            o->beginInsertRows(QModelIndex(), first, last);
        },
        [](History* o) {
            o->endInsertRows();
        },
        [](History* o, int first, int last, int destination) {
            o->beginMoveRows(QModelIndex(), first, last, QModelIndex(), destination);
        },
        [](History* o) {
            o->endMoveRows();
        },
        [](History* o, int first, int last) {
            o->beginRemoveRows(QModelIndex(), first, last);
        },
        [](History* o) {
            o->endRemoveRows();
        }
)),
    m_ownsPrivate(true)
{
    connect(this, &History::newDataReady, this, [this](const QModelIndex& i) {
        this->fetchMore(i);
    }, Qt::QueuedConnection);
    initHeaderData();
}

History::~History() {
    if (m_ownsPrivate) {
        history_free(m_d);
    }
}
void History::initHeaderData() {
}
void History::load(const QString& path)
{
    return history_load(m_d, path.utf16(), path.size());
}
Repositories::Repositories(bool /*owned*/, QObject *parent):
    QAbstractItemModel(parent),
    m_d(nullptr),
    m_ownsPrivate(false)
{
    initHeaderData();
}

Repositories::Repositories(QObject *parent):
    QAbstractItemModel(parent),
    m_d(repositories_new(this,
        repositoriesActiveRepositoryChanged,
        [](const Repositories* o) {
            Q_EMIT o->newDataReady(QModelIndex());
        },
        [](Repositories* o) {
            Q_EMIT o->layoutAboutToBeChanged();
        },
        [](Repositories* o) {
            o->updatePersistentIndexes();
            Q_EMIT o->layoutChanged();
        },
        [](Repositories* o, quintptr first, quintptr last) {
            o->dataChanged(o->createIndex(first, 0, first),
                       o->createIndex(last, 0, last));
        },
        [](Repositories* o) {
            o->beginResetModel();
        },
        [](Repositories* o) {
            o->endResetModel();
        },
        [](Repositories* o, int first, int last) {
            o->beginInsertRows(QModelIndex(), first, last);
        },
        [](Repositories* o) {
            o->endInsertRows();
        },
        [](Repositories* o, int first, int last, int destination) {
            o->beginMoveRows(QModelIndex(), first, last, QModelIndex(), destination);
        },
        [](Repositories* o) {
            o->endMoveRows();
        },
        [](Repositories* o, int first, int last) {
            o->beginRemoveRows(QModelIndex(), first, last);
        },
        [](Repositories* o) {
            o->endRemoveRows();
        }
)),
    m_ownsPrivate(true)
{
    connect(this, &Repositories::newDataReady, this, [this](const QModelIndex& i) {
        this->fetchMore(i);
    }, Qt::QueuedConnection);
    initHeaderData();
}

Repositories::~Repositories() {
    if (m_ownsPrivate) {
        repositories_free(m_d);
    }
}
void Repositories::initHeaderData() {
}
QString Repositories::activeRepository() const
{
    QString v;
    repositories_active_repository_get(m_d, &v, set_qstring);
    return v;
}
bool Repositories::add(quint64 index, const QString& path)
{
    return repositories_add(m_d, index, path.utf16(), path.size());
}
QString Repositories::addLastError() const
{
    QString s;
    repositories_add_last_error(m_d, &s, set_qstring);
    return s;
}
bool Repositories::remove(quint64 index)
{
    return repositories_remove(m_d, index);
}
void Repositories::setCurrent(quint64 index)
{
    return repositories_set_current(m_d, index);
}

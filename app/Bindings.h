/* generated by rust_qt_binding_generator */
#ifndef BINDINGS_H
#define BINDINGS_H

#include <QtCore/QObject>
#include <QtCore/QAbstractItemModel>

class App;
class Repositories;

class App : public QObject
{
    Q_OBJECT
public:
    class Private;
private:
    Repositories* const m_repositories;
    Private * m_d;
    bool m_ownsPrivate;
    Q_PROPERTY(Repositories* repositories READ repositories NOTIFY repositoriesChanged FINAL)
    explicit App(bool owned, QObject *parent);
public:
    explicit App(QObject *parent = nullptr);
    ~App();
    const Repositories* repositories() const;
    Repositories* repositories();
    Q_INVOKABLE quint64 addRepository(const QString& path);
    Q_INVOKABLE QString addRepositoryGetLastError() const;
    Q_INVOKABLE void init();
    Q_INVOKABLE quint64 repositoryIndex(quint64 id) const;
Q_SIGNALS:
    void repositoriesChanged();
};

class Repositories : public QAbstractItemModel
{
    Q_OBJECT
    friend class App;
public:
    class Private;
private:
    Private * m_d;
    bool m_ownsPrivate;
    Q_PROPERTY(quint64 count READ count NOTIFY countChanged FINAL)
    explicit Repositories(bool owned, QObject *parent);
public:
    explicit Repositories(QObject *parent = nullptr);
    ~Repositories();
    quint64 count() const;
    Q_INVOKABLE bool add(quint64 index, const QString& path);
    Q_INVOKABLE bool remove(quint64 index);

    int columnCount(const QModelIndex &parent = QModelIndex()) const override;
    QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const override;
    QModelIndex index(int row, int column, const QModelIndex &parent = QModelIndex()) const override;
    QModelIndex parent(const QModelIndex &index) const override;
    bool hasChildren(const QModelIndex &parent = QModelIndex()) const override;
    int rowCount(const QModelIndex &parent = QModelIndex()) const override;
    bool canFetchMore(const QModelIndex &parent) const override;
    void fetchMore(const QModelIndex &parent) override;
    Qt::ItemFlags flags(const QModelIndex &index) const override;
    void sort(int column, Qt::SortOrder order = Qt::AscendingOrder) override;
    int role(const char* name) const;
    QHash<int, QByteArray> roleNames() const override;
    QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const override;
    bool setHeaderData(int section, Qt::Orientation orientation, const QVariant &value, int role = Qt::EditRole) override;
    Q_INVOKABLE bool insertRows(int row, int count, const QModelIndex &parent = QModelIndex()) override;
    Q_INVOKABLE bool removeRows(int row, int count, const QModelIndex &parent = QModelIndex()) override;
    bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole) override;
    Q_INVOKABLE bool current(int row) const;
    Q_INVOKABLE bool setCurrent(int row, bool value);
    Q_INVOKABLE QString displayName(int row) const;
    Q_INVOKABLE quint64 id(int row) const;

Q_SIGNALS:
    // new data is ready to be made available to the model with fetchMore()
    void newDataReady(const QModelIndex &parent) const;
private:
    QHash<QPair<int,Qt::ItemDataRole>, QVariant> m_headerData;
    void initHeaderData();
    void updatePersistentIndexes();
Q_SIGNALS:
    void countChanged();
};
#endif // BINDINGS_H
